%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2376 788
%%HiResBoundingBox: 0 0 2376 787.91998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2376 787.91998 re
W
q
[0.24 0 0 -0.24 0 787.91998] cm
q
0 0 9899.999 3280.2144 re
W*
q
[3.124435 0 0 3.124112 0.0523825 0] cm
/DeviceRGB {} CS
[0.0667 0.1765 0.3059] SC
/DeviceRGB {} cs
[0.0667 0.1765 0.3059] sc
0 0 3168.5393 1050.96692 re
f
Q
q
[33.389462 0 0 33.386009 381.44595 223.74739] cm
q
44.873001 2.446 m
31.408001 -3.367 23.404001 12.259 30.753002 21.609001 c
32.175999 11.937 38.708 7.375 44.873001 2.446 c
h
14.616 23.625999 m
11.144 25.532 9.702 29.469 5.539001 30.684999 c
7.137001 38.262001 0.898001 44.931 7.556001 38.752998 c
7.556001 31.693998 l
13.717001 28.325998 17.991001 18.080997 27.727001 21.607998 c
24.676001 17.336998 26.686001 8.235998 25.710001 4.461998 c
20.508001 5.904998 15.602001 11.005999 18.649002 17.572998 c
13.015002 14.558998 1.261002 18.805998 2.512003 22.615997 c
4.809 20.716 13.539 20.959999 14.616 23.625999 c
h
13.945 38.752998 m
13.945 38.752998 16.822001 34.152 21.257999 31.777998 c
22.081999 31.336998 13.272999 31.777998 13.272999 31.777998 c
13.945 38.752998 l
h
33.778999 21.608 m
39.354 14.408 48.195 10.472 61.011002 10.514 c
53.389999 -4.303 31.962 11.711 33.778999 21.608 c
h
67.063004 36.737 m
63.363003 26.605999 48.667004 23.722 34.789005 25.641998 c
62.300003 32.442997 30.520004 60.891998 34.789005 75.063004 c
36.821007 81.812004 49.883003 86.346001 61.011005 82.123001 c
37.987007 77.630005 62.198006 37.099003 45.883003 28.669003 c
66.574005 34.329002 43.616005 70.473999 58.993004 73.046005 c
54.744003 70.265007 55.352005 67.347008 55.944004 66.030006 c
61.257 56.311001 71.667999 49.348 67.063004 36.737 c
h
35.797001 22.617001 m
54.567001 19.228001 69.761002 27.465 72.106003 43.797001 c
86.420998 15.989 49.034 5.956 35.797001 22.617001 c
h
34.789001 28.667999 m
42.957001 38.737 37.325001 55.009998 20.667002 51.863998 c
21.803001 54.761997 20.872002 59.728996 22.686001 61.949997 c
24.313002 55.511997 29.326 52.451996 38.822998 53.880997 c
42.994999 47.098999 43.973999 30.482 34.789001 28.667999 c
h
17.584999 68.788002 m
17.488998 68.857002 17.342999 68.986 17.139 69.187004 c
16.535 69.646004 15.776 69.950005 14.768 70.002007 c
14.686999 69.988007 14.61 69.972008 14.533999 69.952003 c
13.999 69.514 10.763 66.784004 10.573 64.469002 c
10.722 64.249001 10.962 64.020004 11.354 63.855003 c
11.392 63.844002 11.427 63.833004 11.465 63.821003 c
13.803001 63.592003 14.506001 64.998001 16.634001 64.975006 c
16.031 63.180008 19.589001 60.787006 16.634001 59.934006 c
10.775001 66.434006 -1.368999 58.370007 4.531001 49.848007 c
0.899001 49.578007 -0.328999 51.712006 -3.536999 51.865005 c
3.212001 61.589005 10.657002 70.615005 21.676001 76.072006 c
20.541 73.172005 21.473001 68.206009 19.66 65.986008 c
18.962999 66.914001 18.403 67.981003 17.584999 68.788002 c
h
W
[78.855746 0 0 82.573586 -3.536998 1.183748] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0.066447 def
/xMax 1.140792 def
/yMax 1.03135 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.27 mul 0.722 add
1 index 1 exp 0.432 mul 0.529 add
2 index 1 exp 0.376 mul 0.275 add
4 3 roll pop 
}
def
-0 1.140792 0 axialSH
Q
Q
q
[26.329508 0 0 26.326788 9610.3223 921.43762] cm
q
-235 0 3 56 re
W
[3 0 0 56.000002 -235.000004 0.0000000655821] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0.000001 def
/yMin -0 def
/xMax 1.000001 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.27 mul 0.722 add
1 index 1 exp 0.432 mul 0.529 add
2 index 1 exp 0.376 mul 0.275 add
4 3 roll pop 
}
def
0.000001 1.000001 0 axialSH
Q
Q
q
[52.147976 0 0 52.142586 3817.5547 976.11414] cm
q
11.32 10.56 m
11.32 11 11.253333 11.416667 11.12 11.81 c
10.986667 12.203334 10.81 12.556667 10.59 12.870001 c
10.37 13.183334 10.110001 13.456668 9.81 13.690001 c
9.51 13.923333 9.200001 14.1 8.88 14.22 c
9.573334 14.473333 10.086667 15.086667 10.42 16.06 c
11.020001 17.76 l
11.246667 18.426666 11.580001 18.92 12.020001 19.24 c
11.820001 19.506666 11.520001 19.73 11.120001 19.91 c
10.720001 20.09 10.280002 20.18 9.800001 20.18 c
9.320001 20.18 8.946668 20.043333 8.680001 19.77 c
8.413335 19.496668 8.166668 19.02 7.940002 18.34 c
7.220002 16.24 l
7.073335 15.839999 6.876669 15.533333 6.630002 15.32 c
6.383335 15.106667 6.013335 15 5.520001 15 c
4.700001 15 l
4.700001 20 l
4.273335 20.08 3.740001 20.120001 3.100001 20.120001 c
2.460001 20.120001 1.933335 20.08 1.520001 20 c
1.520001 6.44 l
1.660001 6.3 l
2.820002 6.273333 3.796668 6.253333 4.590002 6.24 c
5.383335 6.226667 6.006668 6.22 6.460002 6.22 c
7.193335 6.22 7.860001 6.31 8.460001 6.49 c
9.06 6.67 9.570001 6.94 9.990001 7.3 c
10.410001 7.66 10.736668 8.113333 10.970001 8.66 c
11.203335 9.206666 11.320002 9.839999 11.320002 10.56 c
11.32 10.56 l
h
4.7 8.62 m
4.7 12.54 l
5.3 12.54 5.813333 12.53 6.24 12.51 c
6.666667 12.490001 7.01 12.410001 7.27 12.270001 c
7.529999 12.13 7.726666 11.933333 7.86 11.68 c
7.993333 11.426667 8.06 11.06 8.06 10.58 c
8.06 9.286666 7.433333 8.639999 6.179999 8.639999 c
5.349999 8.639999 l
5.349999 8.639999 5.133333 8.633332 4.699999 8.619999 c
4.7 8.62 l
h
18.360001 9.72 m
19.700001 6.34 l
20.046667 6.26 20.493334 6.22 21.040001 6.22 c
21.626667 6.22 22.133333 6.3 22.560001 6.46 c
22.700001 6.62 l
18.82 15.8 l
18.82 20 l
18.406666 20.08 17.873333 20.120001 17.219999 20.120001 c
16.566666 20.120001 16.033333 20.08 15.619999 20 c
15.619999 15.719999 l
11.759998 6.719999 l
12.373332 6.359999 12.959998 6.179999 13.519999 6.179999 c
14.079999 6.179999 14.483332 6.276666 14.729999 6.469999 c
14.976666 6.663332 15.193332 6.993332 15.379998 7.459999 c
16.339998 9.839999 l
16.686665 10.693333 16.986666 11.646666 17.239998 12.699999 c
17.359999 12.699999 l
17.573332 11.859999 17.906666 10.866666 18.359999 9.719999 c
18.360001 9.72 l
h
26.42 17.139999 m
26.059999 17.139999 25.793333 17.133333 25.620001 17.119999 c
24.76 20.019999 l
24.440001 20.099998 23.993334 20.139999 23.42 20.139999 c
22.779999 20.139999 22.26 20.066666 21.860001 19.92 c
21.76 19.76 l
26.16 6.34 l
26.68 6.26 27.286667 6.22 27.98 6.22 c
28.766666 6.22 29.393333 6.266667 29.859999 6.36 c
34.18 19.799999 l
33.713333 20.053331 33.186665 20.179998 32.599998 20.179998 c
31.906664 20.179998 31.419998 20.059998 31.139999 19.819998 c
30.860001 19.579998 30.620001 19.119997 30.42 18.439999 c
30.040001 17.119999 l
29.866667 17.133333 29.606667 17.139999 29.26 17.139999 c
26.42 17.139999 l
h
26.360001 14.62 m
27.16 14.599999 l
28.619999 14.599999 l
28.686666 14.599999 28.803333 14.603333 28.969999 14.61 c
29.136665 14.616667 29.26 14.62 29.34 14.62 c
29 13.38 l
28.68 12.26 28.313334 10.886666 27.9 9.26 c
27.779999 9.26 l
27.673332 9.833333 27.353333 11.106667 26.82 13.08 c
26.360001 14.62 l
h
46.619999 6.2 m
46.759998 6.34 l
46.759998 19.940001 l
46.226665 20.060001 45.596664 20.120001 44.869999 20.120001 c
44.143333 20.120001 43.5 20.08 42.939999 20 c
39.799999 12.84 l
39.426666 12.026667 39.046665 11.086667 38.66 10.020001 c
38.599998 10.040001 l
38.759998 11.986668 38.84 13.980001 38.84 16.02 c
38.84 20 l
38.426666 20.08 37.926666 20.120001 37.34 20.120001 c
36.753334 20.120001 36.259998 20.08 35.860001 20 c
35.860001 6.4 l
36.366665 6.28 36.976665 6.22 37.690002 6.22 c
38.403339 6.22 39.040005 6.26 39.600002 6.34 c
42.700001 13.48 l
43.260002 14.799999 43.673336 15.813333 43.940002 16.52 c
44.020004 16.479999 l
43.860004 14.626666 43.780003 12.66 43.780003 10.58 c
43.780003 8.139999 l
43.780003 7.446666 43.920002 6.949999 44.200001 6.65 c
44.48 6.35 44.933334 6.2 45.560001 6.2 c
46.620003 6.2 l
46.619999 6.2 l
h
56.919998 11.78 m
56.919998 11.54 l
56.919998 9.566667 56.186665 8.58 54.719997 8.58 c
53.879997 8.58 53.273331 8.963333 52.899998 9.73 c
52.526665 10.496666 52.339996 11.626666 52.339996 13.12 c
52.339996 14.6 52.57333 15.7 53.039997 16.42 c
53.506664 17.139999 54.186665 17.5 55.079998 17.5 c
55.546665 17.5 56.063332 17.389999 56.629997 17.17 c
57.196663 16.950001 57.813328 16.6 58.479996 16.120001 c
58.813328 16.346668 59.123329 16.656668 59.409996 17.050001 c
59.696663 17.443335 59.873329 17.820002 59.939995 18.18 c
59.633327 18.473333 59.276661 18.75 58.869995 19.01 c
58.463329 19.27 58.023327 19.493334 57.549995 19.68 c
57.076664 19.866667 56.583328 20.016668 56.069996 20.130001 c
55.556664 20.243334 55.039997 20.300001 54.519997 20.300001 c
53.493328 20.300001 52.626663 20.103334 51.919998 19.710001 c
51.213333 19.316668 50.643333 18.793335 50.209999 18.140001 c
49.776665 17.486668 49.463333 16.733335 49.27 15.880001 c
49.076668 15.026668 48.980003 14.14 48.98 13.220001 c
48.98 12.020001 49.130001 10.970001 49.43 10.070002 c
49.73 9.170002 50.136669 8.420002 50.650002 7.820002 c
51.163334 7.220001 51.76667 6.770001 52.460003 6.470002 c
53.153336 6.170002 53.893337 6.020002 54.680004 6.020002 c
55.480003 6.020002 56.206673 6.126669 56.860004 6.340002 c
57.513336 6.553336 58.070004 6.846669 58.530006 7.220002 c
58.990009 7.593336 59.343342 8.033336 59.590008 8.540002 c
59.836674 9.046668 59.960007 9.593335 59.960007 10.180002 c
59.960007 11.366669 59.35334 11.960002 58.140007 11.960002 c
57.780006 11.960002 57.373341 11.900002 56.920006 11.780002 c
56.919998 11.78 l
h
69.459999 11.64 m
69.440002 10.16 l
69.440002 6.34 l
69.85334 6.26 70.390007 6.22 71.050003 6.22 c
71.709999 6.22 72.239998 6.26 72.639999 6.34 c
72.639999 20 l
72.213333 20.08 71.68 20.120001 71.040001 20.120001 c
70.400002 20.120001 69.866669 20.08 69.440002 20 c
69.440002 15.76 l
69.459999 14.280001 l
68.459999 14.300001 l
66.139999 14.300001 l
65.139999 14.280001 l
65.159996 15.76 l
65.159996 20 l
64.746658 20.08 64.213326 20.120001 63.559998 20.120001 c
62.906666 20.120001 62.373333 20.08 61.959999 20 c
61.959999 6.34 l
62.373333 6.26 62.906666 6.22 63.559998 6.22 c
64.213326 6.22 64.746658 6.26 65.159996 6.34 c
65.159996 10.16 l
65.139999 11.639999 l
66.139999 11.619999 l
68.459999 11.619999 l
69.459999 11.64 l
h
79 17.139999 m
78.639999 17.139999 78.373329 17.133333 78.199997 17.119999 c
77.339996 20.019999 l
77.019997 20.099998 76.573326 20.139999 76 20.139999 c
75.360001 20.139999 74.840004 20.066666 74.440002 19.92 c
74.340004 19.76 l
78.740005 6.34 l
79.260002 6.26 79.866669 6.22 80.560005 6.22 c
81.346672 6.22 81.973335 6.266667 82.440002 6.36 c
86.760002 19.799999 l
86.293335 20.053331 85.76667 20.179998 85.18 20.179998 c
84.486664 20.179998 84 20.059998 83.720001 19.819998 c
83.440002 19.579998 83.200005 19.119997 83 18.439999 c
82.620003 17.119999 l
82.446671 17.133333 82.186668 17.139999 81.840004 17.139999 c
79 17.139999 l
h
78.940002 14.62 m
79.740005 14.599999 l
81.200005 14.599999 l
81.26667 14.599999 81.383339 14.603333 81.550003 14.61 c
81.716667 14.616667 81.840004 14.62 81.920006 14.62 c
81.580009 13.38 l
81.26001 12.26 80.893341 10.886666 80.480011 9.26 c
80.360008 9.26 l
80.253342 9.833333 79.933342 11.106667 79.400009 13.08 c
78.940002 14.62 l
h
88.019997 19.959999 m
89.079994 6.359999 l
89.666656 6.253332 90.359993 6.199999 91.159996 6.199999 c
91.959999 6.199999 92.659996 6.253332 93.259995 6.359999 c
94.439995 11.259998 l
94.906662 13.473332 95.153328 14.679998 95.179993 14.879998 c
95.319992 14.879998 l
95.373329 14.546665 95.619995 13.339998 96.05999 11.259998 c
97.259987 6.359998 l
97.846649 6.253332 98.539986 6.199998 99.339989 6.199998 c
100.139992 6.199998 100.839989 6.253332 101.439987 6.359998 c
102.499985 19.959999 l
102.086647 20.066666 101.576653 20.119999 100.969986 20.119999 c
100.363319 20.119999 99.866653 20.086666 99.479988 20.019999 c
99.159988 14.459999 l
99.066658 12.246666 99.013321 10.706666 98.999985 9.839999 c
98.879982 9.839999 l
96.899979 17.98 l
96.419975 18.059999 95.86998 18.1 95.249977 18.1 c
94.629974 18.1 94.079979 18.059999 93.599976 17.98 c
91.639977 9.839999 l
91.499977 9.839999 l
91.499977 11.026666 91.44664 12.566666 91.339973 14.459999 c
91.03997 20.019999 l
90.653305 20.086666 90.156639 20.119999 89.549973 20.119999 c
88.943306 20.119999 88.433311 20.066666 88.019974 19.959999 c
88.019997 19.959999 l
h
W
[100.979987 0 0 14.279999 1.520007 6.020002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.27 mul 0.722 add
1 index 1 exp 0.432 mul 0.529 add
2 index 1 exp 0.376 mul 0.275 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
